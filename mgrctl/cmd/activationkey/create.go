package activationkey

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/uyuni-project/uyuni-tools/shared/api"
	"github.com/uyuni-project/uyuni-tools/shared/api/activationkey"
	apiTypes "github.com/uyuni-project/uyuni-tools/shared/api/types"
	"github.com/uyuni-project/uyuni-tools/shared/types"
	"github.com/uyuni-project/uyuni-tools/shared/utils"
)

type createFlags struct {
	api.ConnectionDetails `mapstructure:"api"`
	Key          string
	Description          string
	BaseChannelLabel          string
	UsageLimit          int
	UniversalDefault          bool
	Key          string
	$param.getFlagName()          $param.getType()
}

func createCommand(globalFlags *types.GlobalFlags) *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create",
		Short: "Create a new activation key.
 The activation key parameter passed
 in will be prefixed with the organization ID, and this value will be
 returned from the create call.

 Eg. If the caller passes in the key "foo" and belong to an organization with
 the ID 100, the actual activation key will be "100-foo".

 This call allows for the setting of a usage limit on this activation key.
 If unlimited usage is desired see the similarly named API method with no
 usage limit argument.",
		RunE: func(cmd *cobra.Command, args []string) error {
			var flags createFlags
			return utils.CommandHelper(globalFlags, cmd, args, &flags, create)
		},
	}

	cmd.Flags().String("Key", "", "Leave empty to have new key autogenerated.")
	cmd.Flags().String("Description", "", "")
	cmd.Flags().String("BaseChannelLabel", "", "Leave empty to accept default.")
	cmd.Flags().String("UsageLimit", "", "If unlimited usage is desired, use the create API that does not include the parameter.")
	cmd.Flags().String("UniversalDefault", "", "")
	cmd.Flags().String("Key", "", "Leave empty to have new key autogenerated.")
	cmd.Flags().String("$param.getFlagName()", "", "$param.getDesc()")

	return cmd
}

func create(globalFlags *types.GlobalFlags, flags *createFlags, cmd *cobra.Command, args []string) error {

res, err := activationkey.Activationkey(&flags.ConnectionDetails, flags.Key, flags.Description, flags.BaseChannelLabel, flags.UsageLimit, flags.UniversalDefault, flags.Key, flags.$param.getFlagName())
	if err != nil {
		return err
	}

	fmt.Printf("Result: %v", res)

	return nil
}

